Move selection:

Preemptive Selection:
	-players may pick a move that gets executed before the main movement turn
		+guard skills that counteract attacks on them
		+sneak attacks, etc (priority moves)
		
Main Selection:
	-evaluated on a per-combattant basis, ordered by speed (either side)
	-allows players to react to previous actions/occurances
	
PC Options:
	-attack (weapon based attack)
	-skill (special skillz)
	-move
	-item (from inventory) (counts as preemptive)
	

What's in a skill?
	-target mode
		+restriction
	-bloom mode
	-effects caused
	-preemptive:Boolean
	-governing attributes
		+primary
		+secondary
	* reference to a description object for display purposes
		
What kind of target modes?
	-direct combattant w/ range
	-direct ground w/range
	-pathfind w/range
	-self
	-directional
	
What kind of bloom modes?
	-target only (more generally an AoE of 1)
	-AoE around target
	-line to target
	-first in line (derived from 'line to target')
	
Types of effects?
	-damage
		+type
		+amount
		+some randomization ~ generalize as an "outgoing damage modifier"
		+direct:Boolean
		+alignment
		+source:Skill
	-healing
		+amount
		+alignment
		+source:Skill
	-add enchant (umbrella term for a recurring effect)
		+alignment
	-remove enchant
		+alignment
		
Battlefield callbacks:
	-certain events in the battlefield can activate a callback function
		+player move
		+turn end
		+turn begin
		+etc(?)
		
Various automatic things are affected by skills, such as...
	-damage taken
	-healing done
	-retaliation
	-dodge
	-add/remove 'enchants'
	
A player can add/remove effect reactors
	-damage
		+change amount
		+change type
		+dodge (nullify damage)
		+absorb (changes effect to a heal)
		+retaliate (sets a new skill in motion)
	-heal
		+change amount
		+redirect heal
		
A skill "requests" a reaction from a target:
	target may modify the reaction and/or the target
	target could potentially add new reaction+targets

Call a `reaction+target` a `ReactTarget`
Maybe think of skills as causing a "Stack" to be evaluated:
	Skill pushes 1 or more ReactTargets to the stack
	while(!stack.empty)
		top = stack.pop
		result = top.react
		handleReaction(react)
		
ReactTarget.react returns a Seq of:
	StackPush(new ReactTarget instance)		//target has caused something to happen to someone else. 
											//A new ReactTarget should be pushed to the stack
	Acceptance(what happened to target)		//something happened to the target. No further action required
	Message(text/xml/something)				//A message to be displayed by the UI. Maybe obsolete, to be included under Acceptance

Target's Reaction will depend on a list of "reactors" on it:
	Armor/Resistances: reduces damage - low priority, should probably be activated last
	Special Effects: could also include armor, but I'm calling it SFx because they will most likely come from enchants
		e.g. Turn fire damage into water damage
		e.g. Ready for retaliation: Instead of taking damage, cause damage to other target
		e.g. Healing effectiveness reduced
		e.g. 1/2 damage redirected to ally
		e.g. anything! oh the possibilities!
		
Terminology:

Combattant	- any entity in combat that may use skills
Skill		- an action that can be taken by a Combattant. Skills cause any number of Effects on any number of Targets (i.e. Skills generate ReactTargets)
Target		- any entity in combat that can be targetted by a skill. Includes Combattants and Ground Positions
Effect		- something that could happen to a Target
ReactTarget	- an object that specifies a Target and an Effect designated for that Target. 
Response	- how a Target reacts to having an Effect applied to it.
StackPush	- a type of Response meaning that a new ReactTarget should be added to the stack for evaluation
Acceptance	- a type of Response meaning that "something" happened to the Target and no further action is required
Message		- a type of Response meaning that the combat system's UI should display a message: no further action
Reactor		- an object that decides how to react to an Effect. A Target may have many Reactors. Acceptance reactions should be passed on to the next priority Reactor. Others will be returned.